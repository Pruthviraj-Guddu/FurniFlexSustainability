Index: dev/AI.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- Trigger to automatically match new accounts to old accounts by graduation year\nCREATE OR REPLACE TRIGGER match_graduation_year\nBEFORE INSERT ON Accounts\nFOR EACH ROW\nBEGIN\n    INSERT INTO Transactions (transactionID, buyerID, sellerID, itemID)\n    SELECT NULL, :new.accountID, a.accountID, NULL\n    FROM Accounts a\n    WHERE a.graduationYear = :new.startYear;\nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        NULL; -- No matching account found, do nothing\nEND;\n\n\n-- Function for recommendation system based on user schoolName\nCREATE OR REPLACE FUNCTION get_recommendations(p_schoolName IN VARCHAR2)\nRETURN SYS_REFCURSOR\nAS\n    recommendations SYS_REFCURSOR;\nBEGIN\n    OPEN recommendations FOR\n    SELECT l.*\n    FROM Listings l\n    JOIN Accounts a ON l.ownerID = a.accountID\n    WHERE a.schoolName = p_schoolName\n    AND l.status = 'available';\n    RETURN recommendations;\nEND;\n\n\n-- Trigger to automatically delete listing when status changes to sold or remove\nCREATE OR REPLACE TRIGGER delete_listing_trigger\nBEFORE UPDATE ON Listings\nFOR EACH ROW\nBEGIN\n    IF :new.status = 'sold' OR :new.status = 'remove' THEN\n        DELETE FROM Listings WHERE itemID = :old.itemID;\n    END IF;\nEND;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/AI.sql b/dev/AI.sql
--- a/dev/AI.sql	
+++ b/dev/AI.sql	
@@ -1,3 +1,5 @@
+@@furni_db.sql;
+
 -- Trigger to automatically match new accounts to old accounts by graduation year
 CREATE OR REPLACE TRIGGER match_graduation_year
 BEFORE INSERT ON Accounts
